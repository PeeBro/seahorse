---
title: "Seahorse ML"
author: "Matej Stevuliak"
date: "11/12/2019"
output: html_document
---
```{r}

library(reshape2)
library(reshape)
library(ggplot2)
library(tidyr)      # Needed for tidy data functions like separate
library(tidyverse)
library(mltools)  # for MCC coeficient
library(caret)
library(MASS)
library(dplyr)

```


#ready the data
```{r}
log_BE_PCA <- read.csv("../Data/OUTPUT/logBEplusPCA.csv")
```

Look at the groups, possibly filter for 
```{r}
kable(xtabs(~ Disease.status + Gender, data=log_BE_PCA))
kable(xtabs(~ Disease.status + Gender + Fasting, data=log_BE_PCA))
kable(xtabs(~ Disease.status + Gender + Project.x, data=log_BE_PCA))
```


Scale data around 0 by mean and SD
```{r}
df <- scale(log_BE_PCA[,c(10,11,12,13,14,15,22,23,24,25,35,36,37)], center = TRUE, scale = TRUE)

chart.Correlation(df, histogram=TRUE, pch=".", main="Corelation Log BE")
df <- cbind(df, log_BE_PCA[,c(1,2,4,5,6,7)])

# add age groups 
df <- df %>%  
  mutate(Age_fac = ifelse(Age < 30, "20s", ifelse(Age < 40 & Age >= 30, "30s", ifelse(Age < 50 & Age >= 40, "40s", "50s") )))

df <- df %>%  
  mutate(Age_fac_ = ifelse(Age < 30, "30<", ifelse(Age < 50 & Age >= 30, "30-50", "50s" )))


```
Look at the distribution of scaled energetics. 
```{r}
bio_log <- melt(df, id.vars = c("ID", "Project.x", "Disease.status", "Gender", "Fasting", "Age", "Age_fac", "Age_fac_"))
bio_log <- filter(bio_log, variable != "Other")
bio_log <- drop_na(bio_log)

bio_log$comb <- paste0(substr(bio_log$Gender, 1,1),"/", substr(bio_log$Disease.status, 1,1))
ggplot(bio_log)+
  ggtitle("OCR bioenergetics Healthy/Sick patients standardized")+
  geom_boxplot(aes(comb,value),outlier.size = -1, fill = "pink")+
  geom_jitter(aes(comb, value, col = Gender), size = 0.5, width = 0.25)+
  #facet_grid(. ~ variable, scales = "free")+
  facet_wrap(. ~ variable , scales = "free")+
  theme_bw()
```

Age Dissease
```{r}
ggplot(bio_log)+
  ggtitle("Age factor in BE")+
  geom_boxplot(aes(Age_fac,value),outlier.size = -1, fill = "pink")+
  geom_jitter(aes(Age_fac, value, col = Disease.status), size = 0.5, width = 0.25)+
  facet_wrap(. ~ variable , scales = "free")+
  theme_bw()
```

T test in different groups
```{r}
non.mito.resp <- bio_log %>% 
  filter(variable == "log.Non.Mito.Resp")

# T-TEST  
#p_vals of tests for Dissease status for Male and Female separately 
ttest <- t.test(value ~ Disease.status * Age_fac_ , data = non.mito.resp)

ttest$statistic

ttest <- bio_log %>% 
  group_by(variable) %>% 
  summarise(mean = mean(value), 
            count = n(), 
            p_val_ttest = t.test(value ~ Disease.status)$p.value,
            tstat = t.test(value ~ Disease.status)$statistic
            )

# two way Anova value ~ Dissease status * Gender

anov <- aov(value ~ Disease.status * Gender, 
            data = filter(bio_log, variable == "log.Basal.Glyco"))

TukeyHSD(anov)

anova <- bio_log %>% 
  group_by(variable) %>% 
  summarise(mean = mean(value), count = n(), p_val_H_S = summary(aov(value ~ Disease.status * Gender))[[1]][["Pr(>F)"]][[1]] )

# BioEnergetics ~ Disease.status * Gender
anova_D_G <- bio_log %>% 
  group_by(variable) %>% 
  summarise(mean = mean(value), count = n(), 
            p_val_H_S  = summary(aov(value ~ Disease.status * Gender))[[1]][["Pr(>F)"]][[1]],
            p_val_G    = summary(aov(value ~ Disease.status * Gender))[[1]][["Pr(>F)"]][[2]],
            p_val_comb = summary(aov(value ~ Disease.status * Gender))[[1]][["Pr(>F)"]][[3]] )


# filter sick and look at age and gender
# BioEnergetics ~ Gender * Age_fac_
anova_G_A <- bio_log %>% 
  filter(Disease.status == "SICK") %>% 
  group_by(variable) %>% 
  summarise(mean = mean(value), count = n(), 
            p_val_G = summary(aov(value ~ Gender * Age_fac_))[[1]][["Pr(>F)"]][[1]], 
            p_val_Age = summary(aov(value ~ Gender * Age_fac_))[[1]][["Pr(>F)"]][[2]], 
            p_val_comb = summary(aov(value ~ Gender * Age_fac_))[[1]][["Pr(>F)"]][[3]] )


# filter sick and look at age and gender
# BioEnergetics ~ Gender * Age_fac_
anova_D_A <- bio_log %>% 
  group_by(variable) %>% 
  summarise(mean = mean(value), count = n(), 
            p_val_D = summary(aov(value ~ Disease.status * Age_fac_))[[1]][["Pr(>F)"]][[1]], 
            p_val_Age = summary(aov(value ~ Disease.status * Age_fac_))[[1]][["Pr(>F)"]][[2]], 
            p_val_comb = summary(aov(value ~ Disease.status * Age_fac_))[[1]][["Pr(>F)"]][[3]] )



anova_D_F <- bio_log %>% 
  group_by(variable) %>% 
  summarise(mean = mean(value), count = n(), 
            p_val_D = summary(aov(value ~ Disease.status * Fasting))[[1]][["Pr(>F)"]][[1]], 
            p_val_F = summary(aov(value ~ Disease.status * Fasting))[[1]][["Pr(>F)"]][[2]], 
            p_val_comb = summary(aov(value ~ Disease.status * Fasting))[[1]][["Pr(>F)"]][[3]] )




```

Seems that genender doesnt significantly affect Dissease status, age does (log.Non.Mito.Resp, log.Non.Glyco.Acid  in healthy people), but this might be due to irregular patient sampling and I recomend not using Age as predictor. 

Also looking at the differences in the Dissease status and Age group we see correlation between age group and dissease status along all BE possibly due to similar reason. 
there is one exception  in log.ATP.linked.Resp	-1.856248e-16	277	0.3887852798	0.009326743	0.26459354


```{r}
ggplot(bio_log)+
  ggtitle("Age Factor")+
  geom_boxplot(aes(Age_fac,value),outlier.size = -1, fill = "pink")+
  geom_jitter(aes(Age_fac, value, col = Gender), size = 0.5, width = 0.25)+
  #facet_grid(. ~ variable, scales = "free")+
  facet_wrap(. ~ variable + Disease.status , scales = "free")+
  theme_bw()
```




```{r}
index     = sample(1:nrow(df), round(0.8*nrow(df)))
traindata = df[index,]
testdata  = df[-index,]
# Initialise a table that we use for keeping the results for different methods
result = tibble(method=c(NA), sensit=c(NA), specif=c(NA), formula= list(), Rsq = NA, mcc = NA)

## GLM
method<-"GLM"
fit = glm(formula = Disease.status ~ log.Basal.Glyco + log.Max.Glyco.Cpcty + log.Non.Glyco.Acid. + 
            log.Non.Mito.Resp, data = traindata,family=quasibinomial)

observed    = traindata$Disease.status
predicted   = predict(object=fit, newdata =traindata, type = "response")


pd <- data.frame(method    = method,
                observed  = observed, 
                predicted = predicted,
                predicted_factor = ifelse(predicted < 0.5, "HEALTHY", "SICK"))

#pd$predicted_factor <- ifelse(pd$predicted < 0.5, "HEALTHY", "SICK")
conf_m <- table(pd$predicted_factor, pd$observed)
sensit <- sensitivity(conf_m)
specif <- specificity(conf_m)
mcc <- mcc(confusionM = matrix(conf_m, nrow = 2))
Rsq <- (fit$null.deviance - fit$deviance)/fit$null.deviance

result = rbind(result, tibble(method=method, sensit=sensit, specif=specif, formula=as.character(fit$formula[3]), Rsq=Rsq, mcc = mcc ))


```

Test Different coeficients 

```{r}


# try different coeficients
result = tibble(method=c(NA), sensit=c(NA), specif=c(NA), formula= list(), Rsq = NA, mcc = NA)
max = 0
x=c(seq(1,10))-c(-11,-12)
for (i in 1:1000) {
  n = sample(x , 5, replace = FALSE)
  sort(n)
  # cv
  for (i in 1:10000) {
    
    
  }
    
  fit = glm(Disease.status ~ . , data = traindata[,c(n,18)] , family = quasibinomial )
  predicted = predict(fit, traindata, type = "response")
  observed  = traindata$Disease.status
  pd = data.frame(observed  = observed, 
                predicted = predicted,
                predicted_factor = ifelse(predicted < 0.5, "HEALTHY", "SICK"))

  conf_m <- table(pd$predicted_factor, pd$observed)
  sensit <- sensitivity(conf_m)
  specif <- specificity(conf_m)
  mcc <- mcc(confusionM = matrix(t(conf_m), nrow = 2))
  Rsq <- (fit$null.deviance - fit$deviance)/fit$null.deviance



  #if (Rsq > 0.7 & specif > 80 & sensit > 80) {
    result = rbind(result, tibble(method=method, sensit=sensit, specif=specif, formula=as.character(list(colnames(df[,c(n)]))), Rsq=Rsq, mcc=mcc ))
        
}  
  

```

```{r}
# plus Cross validation 
male <- traindata %>% filter(Gender == "Male")
# try different coeficients

result = rbind(result, tibble(formula = list(), sensit=c(NA), specif=c(NA), Rsq = NA, mcc = NA))
max = 0
x=c(seq(1,14))[c(-11,-12)]
for (i in 1:100) {
  n = sample(x , 7, replace = FALSE)
  sort(n)
  # cv
  cvresult = tibble(sensit=c(NA), specif=c(NA), formula= list(), Rsq = NA, mcc = NA)
  for (i in 1:6) {
    cvindex = createDataPartition(traindata$Disease.status,p = 0.8, list = FALSE)
    inside  = traindata[cvindex,]
    outside = traindata[-cvindex,]
    fit = lda(Disease.status ~ . , data = inside[,c(n,18)] , family = quasibinomial )
    observed  = outside$Disease.status
    predicted = predict(fit, outside, type = "response")
    pd = data.frame(observed  = observed, 
                predicted = predicted$class#,
                #predicted_factor = ifelse(predicted < 0.5, "HEALTHY", "SICK")
                )

    conf_m <- confusionMatrix(pd$predicted, pd$observed)
    sensit <- sensitivity(conf_m$table)
    specif <- specificity(conf_m$table)
    mcc <- mcc(confusionM = matrix(t(conf_m$table), nrow = 2))
    Rsq <- (fit$null.deviance - fit$deviance)/fit$null.deviance
    
    cvresult = rbind(cvresult, tibble(sensit=sensit, specif=specif, formula=as.character(list(colnames(df[,c(n)]))), Rsq=Rsq, mcc=mcc ))
    
  }
  
  result = rbind(result, tibble(formula = as.character(list(colnames(inside[,c(n)]))),sensit=mean(cvresult$sensit), specif=mean(cvresult$specif), Rsq=mean(cvresult$Rsq), mcc = mean(cvresult$mcc) ))
        
}  


```

```{r}
pd <- pd %>% 
  arrange(predicted) %>% 
  mutate(index =)
  
pd$index <- seq(1:nrow(pd))


ggplot(pd)+
  ggtitle("")+
  geom_point(aes(x=seq(1:nrow(pd)), y = sort(pd$predicted), col = observed ))
  


```



#rozdelenie data pohlavie dva modely 

# lda, svm, 

# gradient Boosting, random forset. 

# mathews corrlation coeficient 
# grid searchCV

