<<<<<<< HEAD
=======
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(background)
View(background)
View(background)
View(d)
View(d)
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(d)
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
acc_length_intervals[1]
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
acc_length_intervals[1]
acc_length_intervals[1,1]
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
View(d)
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(out)
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(out)
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(out)
View(less_than_10_OCR)
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(data)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
<<<<<<< HEAD
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Check if all packages are installed and loaded
source('../R/src/config_file.R')
# Check if all packages are installed and loaded
source('./R/src/config_file.R')
install.packages("Matrix")
getwd()
setwd("C:/Users/AU586401/Documents/Seahorse_R_pipeline/R")
setwd("C:/Users/AU586401/Documents/Seahorse_R_pipeline")
getwd()
# Check if all packages are installed and loaded
source('./R/src/config_file.R')
installed.packages()
installed.packages()[, "Package"])
installed.packages()[, "Package"]
install.packages("here")
!("here" %in% installed.packages()[, "Package"])
("here" %in% installed.packages()[, "Package"])
# Fix path issues
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the mashine
# Check if all packages are installed and loaded
source(here("R", "src", "config_file.R")
# Check if all packages are installed and loaded
source(here("R", "src", "config_file.R"))
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the mashine
# Check if all packages are installed and loaded
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape2)
library(reshape)
library(tidyverse)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
install.packages("rmarkdown")
install.packages("rmarkdown")
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the mashine
# Check if all packages are installed and loaded
=======
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
<<<<<<< HEAD
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
=======
o_path <- here("Data", "OUTPUT", output_folder)
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
<<<<<<< HEAD
source(here("R", "src", "analysis_source_functions.R"))
=======
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
<<<<<<< HEAD
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
=======
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
<<<<<<< HEAD
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the mashine
# Check if all packages are installed and loaded
=======
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
<<<<<<< HEAD
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
=======
o_path <- here("Data", "OUTPUT", output_folder)
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
<<<<<<< HEAD
source(here("R", "src", "analysis_source_functions.R"))
=======
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
<<<<<<< HEAD
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
=======
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
<<<<<<< HEAD
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the mashine
# Check if all packages are installed and loaded
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the mashine
# Check if all packages are installed and loaded
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the mashine
# Check if all packages are installed and loaded
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
=======
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
>>>>>>> e04a47f7263e0edd59787f3b993bc9c76acc2f8b
