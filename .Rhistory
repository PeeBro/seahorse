library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline-THREE-INTERVALS.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
plot <- plot1(n.bio.well,n.bio.replicate, n.bio.sample) +
ggtitle("Plot type 1A: Difference based natural scale Bio-Energetics OCR") +
ylab(expression("Mean OCR value [pmol O"[2]*" /1000 cells]"))
View(well)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline-THREE-INTERVALS.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline-THREE-INTERVALS.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline-THREE-INTERVALS.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline-THREE-INTERVALS.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline-THREE-INTERVALS.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
# rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Read The the separate xlsx files from folder, Specify entire path to folder.
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
dm <- data$rates
# Chunk 2
# Read The the separate xlsx files from folder, Specify entire path to folder.
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
dm <- data$rates
# Chunk 3
data$Hg_list %>%
kable(caption="Wells removed. Out of 140-160 mmHg interval") %>%
kable_styling()
# Chunk 4
data$OCR_background %>%
kable(caption="Background measurements not included in OCR correction") %>%
kable_styling()
# Chunk 5
data$PER_background %>%
kable(caption="Background measurements not included in PER correction") %>%
kable_styling()
# Chunk 6
data$Zero_measurements %>%
kable(caption="Empty measurements (OCR or PER = 0)") %>%
kable_styling()
# Chunk 7
data$No_cells_measured %>%
kable(caption="Wells with no cells measured") %>%
kable_styling()
# Chunk 8
data$Bad_Cells %>%
kable(caption="Wells with OCR < 10 in first interval") %>%
kable_styling()
# Chunk 9
d_OCR  <- dm
# filter out samples with an interval smaller than 18 measurements. Each interval consist of three or four measurements, so 18/3 = 6 wells should be present. (This approach should work because if individual measurements of wells are wrong (too high/low Hg) then the entire well is removed from the analysis. Thus we do only have "complete" wells with all measurements intact at this point.)
sumar <- d_OCR %>%
group_by(sample_id, Interval) %>%
summarise(n = n()) %>%
filter(n < 18)
# number of intervals has to be 4 or the well discarted
inter <- d_OCR %>%
group_by(sample_id) %>%
summarise(n_inter = length(unique(Interval))) %>%
filter(n_inter != 3)
d_OCR <- d_OCR %>%
filter(! sample_id %in% unique(sumar$sample_id))
d_OCR <- d_OCR %>%
filter(! sample_id %in% unique(inter$sample_id))
cat("Wells removed due lack of usable measurements (Less than six usable wells in any interval): ", paste(unique(sumar$sample_id), collapse = "\n"), sep = "\n")
cat("Wells removed because there are not four intervals: ", paste(unique(inter$sample_id), collapse = "\n"), sep = "\n")
# Chunk 10
# Identify Outliars
# DT = loaded dataframe
# cut.well = threshold for well outliaer,
# cut.point = threshold for point outliaer
# x = Variable: "LOCR", "OCR
dr_ocr <- idfy_sinleP_outlier(d_OCR, cut.point = 6, x = "LOCR")
# clean enviroment
rm(d_OCR)
# write the data into file
write_xlsx(dr_ocr, paste0(OUTPUT_PATH,"/.Data_removed_OCR.xlsx"))
# Chunk 11
# amount of removed outliars
dr_ocr %>%
group_by(sample_id, is.out.p) %>%
summarise(n = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n),
ptg = n / size *100,
percentage = paste(format(ptg, digits= 1, nsmall=2),"%")) %>%
filter(is.out.p == T) %>%
arrange(desc(ptg)) %>%
select(sample_id, percentage) %>%
kable(caption="Amount of removed outliers across samples") %>%
kable_styling(full_width = F)
# Chunk 12
for (smpl in unique(dr_ocr$sample_id)) {
d    <- filter(dr_ocr, sample_id == smpl)
ptg  <- nrow(filter(d, is.out.p == T))/nrow(d)*100
plot <- ggplot(d, aes(Time, OCR))+
ggtitle(paste0("ID: ", smpl, " |  Outliers: ", format(ptg, digits = 3), "%"))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Time, OCR, color = is.out.p))+
guides(color=guide_legend(title="Outlier"))+
xlab("Measurement")+
# ylim(0,15)+
ylab(expression("Mean OCR value [pmol O"[2]*" /1000 cells]"))
print(plot +theme_bw())
}
# Chunk 13
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# The compute bionergetics functions does also calculate the estimates. Both are calculated here
norm.be.well <- compute_bioenergetics_well(dr_ocr, "OCR")
log.be.well <- compute_bioenergetics_well(dr_ocr, "LOCR")
norm.be.replicate <- compute_bioenergetics_replicate(dr_ocr, "OCR")
log.be.replicate  <- compute_bioenergetics_replicate(dr_ocr, "LOCR")
norm.be.sample <- compute_bioenergetics_sample(dr_ocr, "OCR")
log.be.sample <- compute_bioenergetics_sample(dr_ocr, "LOCR")
write_xlsx(norm.be.well$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-well.xlsx"))
write_xlsx(log.be.well$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-well.xlsx"))
write_xlsx(norm.be.replicate$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-replicates.xlsx"))
write_xlsx(log.be.replicate$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-replicates.xlsx"))
write_xlsx(norm.be.sample$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-samples.xlsx"))
write_xlsx(log.be.sample$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-samples.xlsx"))
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# The compute bionergetics functions does also calculate the estimates. Both are calculated here
norm.be.well <- compute_bioenergetics_well(dr_ocr, "OCR")
log.be.well <- compute_bioenergetics_well(dr_ocr, "LOCR")
norm.be.replicate <- compute_bioenergetics_replicate(dr_ocr, "OCR")
log.be.replicate  <- compute_bioenergetics_replicate(dr_ocr, "LOCR")
norm.be.sample <- compute_bioenergetics_sample(dr_ocr, "OCR")
log.be.sample <- compute_bioenergetics_sample(dr_ocr, "LOCR")
write_xlsx(norm.be.well$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-well.xlsx"))
write_xlsx(log.be.well$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-well.xlsx"))
write_xlsx(norm.be.replicate$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-replicates.xlsx"))
write_xlsx(log.be.replicate$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-replicates.xlsx"))
write_xlsx(norm.be.sample$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-samples.xlsx"))
write_xlsx(log.be.sample$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-samples.xlsx"))
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# The compute bionergetics functions does also calculate the estimates. Both are calculated here
norm.be.well <- compute_bioenergetics_well(dr_ocr, "OCR")
log.be.well <- compute_bioenergetics_well(dr_ocr, "LOCR")
norm.be.replicate <- compute_bioenergetics_replicate(dr_ocr, "OCR")
log.be.replicate  <- compute_bioenergetics_replicate(dr_ocr, "LOCR")
norm.be.sample <- compute_bioenergetics_sample(dr_ocr, "OCR")
log.be.sample <- compute_bioenergetics_sample(dr_ocr, "LOCR")
write_xlsx(norm.be.well$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-well.xlsx"))
write_xlsx(log.be.well$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-well.xlsx"))
write_xlsx(norm.be.replicate$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-replicates.xlsx"))
write_xlsx(log.be.replicate$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-replicates.xlsx"))
write_xlsx(norm.be.sample$estimates, paste0(OUTPUT_PATH,"/Estimated_values-OCR-samples.xlsx"))
write_xlsx(log.be.sample$estimates, paste0(OUTPUT_PATH,"/Estimates_values-LOCR-samples.xlsx"))
# The compute bionergetics functions does also calculate the estimates. Both are calculated here
norm.be.well <- compute_bioenergetics_well(dr_ocr, "OCR")
View(estimates)
ylim_low <- min(dr_per$PER) #write - x where x is a number to adjust the starting point of the y axis
ylim_high <- max(dr_per$PER)
for (smpl in unique(dr_per$sample_id)) {
plot <- ggplot(filter(dr_per, sample_id == smpl), aes(Measurement, PER))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, PER, color = is.out.p))+
guides(color=guide_legend(title="Outlier"))+
xlab("Measurement")+
ylim(ylim_low,ylim_high)+
ylab(expression("Mean PER value [pmol H"["+"]*" /1000 cells]"))+
NULL
print(plot +theme_bw())
}
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline-THREE-INTERVALS.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_THREE_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-THREE-INTERVALS_files")
knit_folders <- c(knit_cache, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-THREE-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
ylim_low <- min(dr_per$PER) #write - x where x is a number to adjust the starting point of the y axis
ylim_high <- max(dr_per$PER)
for (smpl in unique(dr_per$sample_id)) {
plot <- ggplot(filter(dr_per, sample_id == smpl), aes(Measurement, PER))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, PER, color = is.out.p))+
guides(color=guide_legend(title="Outlier"))+
xlab("Measurement")+
ylim(ylim_low,ylim_high)+
ylab(expression("Mean PER value [pmol H"["+"]*" /1000 cells]"))+
NULL
print(plot +theme_bw())
}
?replace
