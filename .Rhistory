if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
#TO DO: convert graph to aditive add legends
#TO DO: convert graph to aditive add legends
dr_ecar %>%
group_by(sample_id, is.out.p) %>%
summarise(n = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n),
ptg = n / size *100,
percentage = paste(format(ptg, digits= 1, nsmall=2),"%")) %>%
filter(is.out.p == T) %>%
arrange(desc(ptg)) %>%
select(sample_id, percentage) %>%
kable(caption="Amount of removed outliers across samples") %>%
kable_styling(full_width = F)
for (smpl in unique(dr_ecar$sample_id)) {
plot <- ggplot(filter(dr_ecar, sample_id == smpl), aes(Measurement, ECAR))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, ECAR, color = is.out.p))+
xlab("Interval")+
ylim(0,5)
print(plot +theme_bw())
}
for (smpl in unique(dr_ecar$sample_id)) {
plot <- ggplot(filter(dr_ecar, sample_id == smpl), aes(Measurement, ECAR))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, ECAR, color = is.out.p))+
xlab("Interval")+
ylim(1,4)
print(plot +theme_bw())
}
for (smpl in unique(dr_ecar$sample_id)) {
plot <- ggplot(filter(dr_ecar, sample_id == smpl), aes(Measurement, ECAR))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, ECAR, color = is.out.p))+
xlab("Interval")+
ylim(1.5,3.5)
print(plot +theme_bw())
}
for (smpl in unique(dr_ecar$sample_id)) {
plot <- ggplot(filter(dr_ecar, sample_id == smpl), aes(Measurement, ECAR))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, ECAR, color = is.out.p))+
xlab("Interval")+
ylim(1.5,3)
print(plot +theme_bw())
}
for (smpl in unique(dr_ecar$sample_id)) {
plot <- ggplot(filter(dr_ecar, sample_id == smpl), aes(Measurement, ECAR))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, ECAR, color = is.out.p))+
xlab("Interval")+
print(plot +theme_bw())
}
for (smpl in unique(dr_ecar$sample_id)) {
plot <- ggplot(filter(dr_ecar, sample_id == smpl), aes(Measurement, ECAR))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Measurement, ECAR, color = is.out.p))+
xlab("Interval")
print(plot +theme_bw())
}
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# norm estimates boxplots
norm.be.ECAR$estimates %>%
ggplot(aes(Interval,mean))+
ggtitle("ECAR Estimates natural scale")+
geom_boxplot( width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter( width = 0.2, show.legend = FALSE, size = 0.5 , alpha = 0.7)+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
# log estimates boxplots
log.be.ECAR$estimates %>%
ggplot(aes(Interval,mean))+
ggtitle("Log ECAR Estimates")+
geom_boxplot(width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter(width = 0.2, show.legend = FALSE, size = 0.5 )+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
# norm estimates boxplots
norm.be.ECAR$estimates %>%
ggplot(aes(Interval,mean))+
ggtitle("ECAR Estimates natural scale")+
geom_boxplot( width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter( width = 0.2, show.legend = FALSE, size = 0.5 , alpha = 0.7)+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
# log estimates boxplots
log.be.ECAR$estimates %>%
ggplot(aes(Interval,mean))+
ggtitle("Log ECAR Estimates")+
geom_boxplot(width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter(width = 0.2, show.legend = FALSE, size = 0.5 )+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
# Set path and load the package "here"
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
View(dr_ecar)
# difference based BE
n.bio.ECAR %>%
mutate(Group = ifelse(grepl("A", Sample), "A", "B")) %>%
ggplot(aes(Group, value, fill = variable))+
ggtitle("ECAR Normal scale Bio-Energetics biological groups ")+
geom_boxplot(width = 0.5, outlier.size = -1, alpha = 0.7)+
geom_jitter(width = 0.1, show.legend = FALSE, size = 0.5)+
xlab("Bio-Energetics")+
ylab("ECAR")+
facet_grid(. ~ variable ) +
theme_bw()
# ratio based BE
l.bio.ECAR %>%
mutate(Group = ifelse(grepl("A", Sample), "A", "B")) %>%
ggplot(aes(Group, value, fill = variable))+
ggtitle("ECAR Log scale Bio-Energetics biological groups ")+
geom_boxplot(width = 0.5, outlier.size = -1, alpha = 0.7)+
geom_jitter(width = 0.1, show.legend = FALSE, size = 0.5)+
xlab("Bio-Energetics")+
ylab("ECAR")+
facet_grid(. ~ variable ) +
theme_bw()
# ADD coefficients of variation
# normal scale Bioenergetics
n.bio.ECAR <- melt(norm.be.ECAR$bioenergetics)
n.bio.ECAR %>%
filter(variable != "Other") %>%
ggplot(aes(variable, value, fill = variable ))+
ggtitle("Difference based natural scale Bio-Energetics ECAR")+
geom_boxplot(width = 0.5, outlier.size = -1, alpha = 0.7)+
geom_jitter(width = 0.1, show.legend = FALSE, size = 0.5 )+
xlab("Bio-Energetics")+
ylab(" ")+
theme_bw()
# log scale Bioenergetics
l.bio.ECAR   <- melt(log.be.ECAR$bioenergetics )
l.bio.ECAR %>%
filter(variable != "Other") %>%
ggplot(aes(variable, value, fill = variable ))+
ggtitle("Difference based log scale Bio-Energetics ECAR")+
geom_boxplot(width = 0.5, outlier.size = -1, alpha = 0.7)+
geom_jitter(width = 0.1, show.legend = FALSE, size = 0.5 )+
xlab("Bio-Energetics")+
ylab(" ")+
theme_bw()
# add standard errors
# st.err <- melt(norm.be.ECAR$standard.errors, value.name = "SE", variable.name = "Bio.e" )
# be.er  <- left_join(n.bio.ECAR, st.err, by = c("Sample", "variable"))
# be.er  <- arrange(be.er, Sample)
write_csv(n.bio.ECAR, paste0(OUTPUT_PATH,"/ECAR-BioEnergetics.csv"))
# add standard errors
# st.err <- melt(log.be$standard.errors, value.name = "SE", variable.name = "variable" )
# be.er  <- left_join(l.bio.ECAR, st.err, by = c("Sample", "variable"))
# be.er <- arrange(be.er, Sample)
write_csv(l.bio.ECAR, paste0(OUTPUT_PATH,"/logECAR-BioEnergetics.csv"))
# norm estimates boxplots
norm.be.ECAR$estimates %>%
ggplot(aes(Interval,mean))+
ggtitle("ECAR Estimates natural scale")+
geom_boxplot( width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter( width = 0.2, show.legend = FALSE, size = 0.5 , alpha = 0.7)+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
# log estimates boxplots
log.be.ECAR$estimates %>%
ggplot(aes(Interval,mean))+
ggtitle("Log ECAR Estimates")+
geom_boxplot(width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter(width = 0.2, show.legend = FALSE, size = 0.5 )+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
view(dm$ECAR)
E <- dm %>% select(ECAR)
view(E)
E <- dm %>% select(ECAR, Measurement, Interval)
view(E)
E <- dm %>% select(ECAR, Measurement, Interval)
E %>%
ggplot(aes(Interval,ECAR))+
ggtitle("ECAR Estimates natural scale")+
geom_boxplot( width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter( width = 0.2, show.legend = FALSE, size = 0.5 , alpha = 0.7)+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
E <- dm %>% select(ECAR, Measurement, Project, Interval)
E_mean <- E %>% group_by(Project, Interval)
View(E_mean)
E_mean <- E %>% group_by(Project, Interval) %>%
mutate(ECAR_mean = mean(ECAR))
View(E_mean)
E <- dm %>% select(ECAR, Measurement, Project, Interval)
E_mean <- E %>% group_by(Project, Interval) %>%
mutate(ECAR_mean = mean(ECAR))
E_mean %>%
ggplot(aes(Interval,ECAR_mean))+
ggtitle("ECAR Estimates natural scale")+
geom_boxplot( width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter( width = 0.2, show.legend = FALSE, size = 0.5 , alpha = 0.7)+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
E %>%
ggplot(aes(Interval,ECAR))+
ggtitle("ECAR Estimates natural scale")+
geom_boxplot( width = 0.6, outlier.size = -1, show.legend = FALSE, fill="pink", alpha = 0.7)+
# geom_line(aes(group = sample_id, Interval,mean), col = "grey", size = .1, show.legend = FALSE)+
geom_jitter( width = 0.2, show.legend = FALSE, size = 0.5 , alpha = 0.7)+
xlab("Intervals")+
ylab("logECAR")+
theme_bw()
?tick
