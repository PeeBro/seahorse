<<<<<<< HEAD
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
?readline
# Get input folder
input_folder <- readline(prompt = "Enter name of folder:")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
#THIS IS TEST NUMBER THREE
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Experiments", "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
# Get input folder
input_folder <- readline(prompt = "Enter name of folder:")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
#THIS IS TEST NUMBER THREE
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Experiments", "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
# Get input folder
input_folder <- readline(prompt = "Enter name of folder:")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
#THIS IS TEST NUMBER THREE
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Experiments", "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
# Get input folder
input_folder <- readline(prompt = "Enter name of folder:")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
#THIS IS TEST NUMBER THREE
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Experiments", "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
# Get input folder
input_folder <- readline(prompt = "Enter name of folder:")
# Step 2: Run script by clicking Ctrl + Alt + "Run" -> "Run all" in the toolbar above
# Step 3: Write the name of you new input folder in the console when asked
interactive()
# Get input folder
interactive()
title: "OCR+ECAR-Pipeline"
output: html_document
params:
input_folder: test
params$input_folder
# Get input folder
ifelse(interactive()==FALSE,
# answer<- y,
input_folder <- readline(prompt="Enter name of folder:")
)
input_folder <- readline(prompt = "Enter name of folder:")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
#THIS IS TEST NUMBER THREE
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Experiments", "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
# Get input folder
if(interactive()==FALSE,
# answer<- y,
input_folder <- readline(prompt="Enter name of folder:")
input_folder <- readline(prompt = "Enter name of folder:")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
#THIS IS TEST NUMBER THREE
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Experiments", "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", params = "ask")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place yout excel files there
# Step 2: Run script by clicking Ctrl + Alt + "Run" -> "Run all" in the toolbar above
# Step 3: Write the name of you new input folder in the console when asked
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", params = "ask")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
#THIS IS TEST NUMBER THREE
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Experiments", "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place yout excel files there
# Step 2: Run script by clicking Ctrl + Alt + "Run" -> "Run all" in the toolbar above
# Step 3: Write the name of you new input folder in the console when asked
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", params = "ask")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place yout excel files there
# Step 2: Run script by clicking Ctrl + Alt + "Run" -> "Run all" in the toolbar above
# Step 3: Write the name of you new input folder in the console when asked
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
params$input_folder
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", params = "ask")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", params = "ask")
View(inter)
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", params = "ask")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
library(shiny)
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
getwd()
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
getwd()
rmarkdown::render("OCR+ECAR-Pipeline.Rmd")
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
# HOW TO USE
# Step 1: Make a new folder in the Data/INPUT folder and place your excel files there
# Step 2: Write the name of the folder above. Use quotes like this "My_folder"
# Step 3: Run this code chunk
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd")
# Make Sure You have all following packages, If not uncomment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Check if all packages are installed and loaded
source('./R/src/config_file.R')
getwd
getwd()
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
getwd()
source('./R/src/config_file.R')
source('./R/src/config_file.R')
getwd()
source('./seahorse/R/src/config_file.R')
source('./R/src/config_file.R')
=======
install.packages('kableExtra')
setwd("C:/R/Seahorse_R_pipeline")
here
wd
getwd
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
>>>>>>> a2a7d491b3cfd44db212ea77bf2186212af067c9
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
<<<<<<< HEAD
library(shiny)
# Get input folder
input_folder <- params$input_folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
source('../R/src/config_file.R')
# Check if all packages are installed and loaded
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
source('../R/src/config_file.R')
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("../Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
=======
>>>>>>> a2a7d491b3cfd44db212ea77bf2186212af067c9
# source the functions used in analysis
source(here('/R/src/analysis_source_functions.R'))
INPUT_PATH  <- here('C:/R/Seahorse_R_pipeline/Data/INPUT/SGLT2') # path to the folder of interest
OUTPUT_PATH <- here('C:/R/Seahorse_R_pipeline/Data/OUTPUT')
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# source the functions used in analysis
source(here('/R/src/analysis_source_functions.R'))
INPUT_PATH  <- ('C:/R/Seahorse_R_pipeline/Data/INPUT/SGLT2') # path to the folder of interest
OUTPUT_PATH <- ('C:/R/Seahorse_R_pipeline/Data/OUTPUT')
getwd()
# source the functions used in analysis
source (here('/R/src/analysis_source_functions.R'))
library(here)
# source the functions used in analysis
source (here('/R/src/analysis_source_functions.R'))
INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the foler of interest
OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
# Read The the separate xlsx files from folder, Specify entire path to folder.
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
here()
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
# source the functions used in analysis
source (here('/R/src/analysis_source_functions.R'))
here()
here(R)
here("/R")
here("/R/src")
here("/R/src/analysis_source_functions.R")
here("/R/src/analysis_source_functions.R")
here("./R/src/analysis_source_functions.R")
source("./R/src/analysis_source_functions.R")
source("/R/src/analysis_source_functions.R")
source(here("/R/src/analysis_source_functions.R"))
source(here("./R/src/analysis_source_functions.R"))
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("OCR+ECAR-Pipeline.Rmd")
(tools)
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
here()
getwd()
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(here)       # Used to set the path to the package dir. on the mashine
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(here)       # Used to set the path to the package dir. on the mashine
# source the functions used in analysis
# source (here('/R/src/analysis_source_functions.R'))
source(here("R", "src", "analysis_source_functions.R"))
<<<<<<< HEAD
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render("../Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
=======
INPUT_PATH  <- (here('Data', "INPUT", "ConBIS")) # path to the folder of interest
OUTPUT_PATH <- (here('Data', "OUTPUT", 'HF'))
# Make Sure You have all following packages, If not uncoment and run next line:
#source(here('/R/src/config_file.R'))
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", "ConBIS")) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", 'HF'))
>>>>>>> a2a7d491b3cfd44db212ea77bf2186212af067c9
# Read The the separate xlsx files from folder, Specify entire path to folder.
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
dm <- data$rates
data$Hg_list %>%
kable(caption="Wells removed. Out od 140-160 mmHg interval") %>%
kable_styling()
<<<<<<< HEAD
data$OCR_background %>%
kable(caption="Background measurements not included in OCR correction") %>%
kable_styling()
data$ECAR_background %>%
kable(caption="Background measurements not included in ECAR correction") %>%
kable_styling()
# perep for OCR interval 5 not used
d_OCR  <- dm %>% filter(Interval != "Int5")
# filter out samples with any of intervals having less than 8 measurements
sumar <- d_OCR %>%
group_by(sample_id, Interval) %>%
summarise(n = n()) %>%
filter(n < 18) # les then 18 so it corespods to at least 6 different wells
# number of intervals has to be 4 or discarted
inter <- d_OCR %>%
group_by(sample_id) %>%
summarise(n_inter = length(unique(Interval))) %>%
filter(n_inter != 4)
d_OCR <- d_OCR %>%
filter(! sample_id %in% unique(sumar$sample_id))
d_OCR <- d_OCR %>%
filter(! sample_id %in% unique(inter$sample_id))
paste0("Samples removed due lack of usable measurements(less than 8  in any interval)")
unique(sumar$sample_id)
paste0("Samples removed because there are no 4 intervals )")
unique(inter$sample_id)
# Identify Outliars
# DT = loaded dataframe
# cut.well = threshold for well outliaer,
# cut.point = threshold for point outliaer
# x = Variable: "LOCR", "OCR
dr_ocr <- idfy_sinleP_outlier(d_OCR, cut.point = 6, x = "LOCR")
# clean enviroment
rm(d_OCR)
# write the data into file
write_csv(dr_ocr, paste0(OUTPUT_PATH,"/Data_removed_OCR.csv"))
# amount of removed outliars
dr_ocr %>%
group_by(sample_id, is.out.p) %>%
summarise(n = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n),
ptg = n / size *100,
percentage = paste(format(ptg, digits= 1, nsmall=2),"%")) %>%
filter(is.out.p == T) %>%
arrange(desc(ptg)) %>%
select(sample_id, percentage) %>%
kable(caption="Amount of removed outliers across samples") %>%
kable_styling(full_width = F)
for (smpl in unique(dr_ocr$sample_id)) {
d    <- filter(dr_ocr, sample_id == smpl)
ptg  <- nrow(filter(d, is.out.p == T))/nrow(d)*100
plot <- ggplot(d, aes(Time, OCR))+
ggtitle(paste0("ID: ", smpl, "  out: ", format(ptg, digits = 3), "%"))+
geom_line(aes(group = Well, linetype = Protocol),size = 0.2, color = "grey") +
geom_point(aes(Time, OCR, color = is.out.p))+
xlab("Interval")+
ylim(0,300)
print(plot +theme_bw())
}
# Violin plot LOCR
#  for (smpl in unique(dr_ocr$sample_id)) {
#    d    <- filter(dr_ocr, sample_id == smpl)
#    ptg  <- nrow(filter(d, is.out.p == T))/nrow(d)*100
#    plot <- ggplot(d, aes(Time, LOCR))+
#              ggtitle(paste0("ID: ", smpl, "  out: ", format(ptg, digits = 3), "%"))+
#              geom_violin(aes(Interval, LOCR))+
#              geom_point(aes(Interval, LOCR, color = is.out.p))+
#              xlab("Interval")#+
#
#    print(plot +theme_bw())
# }
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
rmarkdown::render("../Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
knit_with_parameters("C:/R/seahorse/Experiments/OCR+ECAR-Pipeline.Rmd")
knit_with_parameters("C:/R/seahorse/Experiments/OCR+ECAR-Pipeline.Rmd")
View(read_xlsx_set)
# Read The the separate xlsx files from folder, Specify entire path to folder.
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(data)
=======
# Check if all packages are installed and loaded
source('./R/src/config_file.R')
# Check if all packages are installed and loaded
source('../R/src/config_file.R')
# Check if all packages are installed and loaded
source('../R/src/config_file.R')
getwd()
source('Seahorse_R_pipeline/R/src/config_file.R')
source('./Seahorse_R_pipeline/R/src/config_file.R')
source('../Seahorse_R_pipeline/R/src/config_file.R')
getwd()
here()
# Check if all packages are installed and loaded
source('../R/src/config_file.R')
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render("./Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render("../Experiments/OCR+ECAR-Pipeline.Rmd", output_dir = OUTPUT_PATH)
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
here('Experiments', "OCR+ECAR-Pipeline.Rmd")
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
# Check if all packages are installed and loaded
source('../R/src/config_file.R') # In theory this should contain only one dot in the beginning. If problems with this line, try to remove one dot
here::i_am("Experiments/OCR+ECAR-Pipeline.Rmd")
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(here)       # Used to set the path to the package dir. on the mashine
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- sprintf("./Data/OUTPUT/%s", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+ECAR-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+ECAR-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
rmarkdown::render(here('Experiments', "OCR+ECAR-Pipeline.Rmd"), output_dir = OUTPUT_PATH)
>>>>>>> a2a7d491b3cfd44db212ea77bf2186212af067c9
