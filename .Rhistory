library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
?message
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
dm <- data$rates
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
dm <- data$rates
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
dm <- data$rates
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
dm <- data$rates
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# Read The the separate xlsx files from folder, Specify entire path to folder.
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
data <- read_xlsx_set(INPUT_PATH, ".xlsx")
View(d)
for (smpl in unique(dr_ocr$sample_id)) {
d    <- filter(dr_ocr, sample_id == smpl)
ptg  <- nrow(filter(d, is.out.p == T))/nrow(d)*100
plot <- ggplot(d, aes(Time, OCR))+
ggtitle(paste0("ID: ", smpl, " |  Outliers: ", format(ptg, digits = 3), "%"))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Time, OCR, color = is.out.p))+
guides(color=guide_legend(title="Outlier"))+
xlab("Measurement")+
ylim(0,15)+
ylab("OCR (Normalized)")
print(plot +theme_bw())
}
# Violin plot LOCR
#  for (smpl in unique(dr_ocr$sample_id)) {
#    d    <- filter(dr_ocr, sample_id == smpl)
#    ptg  <- nrow(filter(d, is.out.p == T))/nrow(d)*100
#    plot <- ggplot(d, aes(Time, LOCR))+
#              ggtitle(paste0("ID: ", smpl, "  out: ", format(ptg, digits = 3), "%"))+
#              geom_violin(aes(Interval, LOCR))+
#              geom_point(aes(Interval, LOCR, color = is.out.p))+
#              xlab("Interval")#+
#
#    print(plot +theme_bw())
# }
for (smpl in unique(dr_ocr$sample_id)) {
d    <- filter(dr_ocr, sample_id == smpl)
ptg  <- nrow(filter(d, is.out.p == T))/nrow(d)*100
plot <- ggplot(d, aes(Time, OCR))+
ggtitle(paste0("ID: ", smpl, " |  Outliers: ", format(ptg, digits = 3), "%"))+
geom_line(aes(group = Well),size = 0.2, color = "grey") +
geom_point(aes(Time, OCR, color = is.out.p))+
guides(color=guide_legend(title="Outlier"))+
xlab("Measurement")+
ylim(0,15)+
ylab("OCR (Normalized)")
print(plot +theme_bw())
}
# Violin plot LOCR
#  for (smpl in unique(dr_ocr$sample_id)) {
#    d    <- filter(dr_ocr, sample_id == smpl)
#    ptg  <- nrow(filter(d, is.out.p == T))/nrow(d)*100
#    plot <- ggplot(d, aes(Time, LOCR))+
#              ggtitle(paste0("ID: ", smpl, "  out: ", format(ptg, digits = 3), "%"))+
#              geom_violin(aes(Interval, LOCR))+
#              geom_point(aes(Interval, LOCR, color = is.out.p))+
#              xlab("Interval")#+
#
#    print(plot +theme_bw())
# }
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-FOUR-INTERVALS_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
