Maximal.Resp     = est.IntervalInt4 / est.IntervalInt4
)
View(bio_e)
bio_e <- coeficients %>%
mutate(Basal.Resp       = (est.IntervalInt1 - est.IntervalInt4) / est.IntervalInt1,
ATP.linked.Resp  = (est.IntervalInt1 - est.IntervalInt2) / est.IntervalInt1,
Proton.Leak      = (est.IntervalInt2 - est.IntervalInt4) / est.IntervalInt2,
Spare.Resp.Cpcty = est.IntervalInt3 / est.IntervalInt1,
Maximal.Resp     = est.IntervalInt3 / est.IntervalInt4) %>%
select(c("Basal.Resp", "ATP.linked.Resp", "Proton.Leak", "Spare.Resp.Cpcty", "Maximal.Resp", Sample = "est.Sample" ))
View(bio_e)
bio_e <- coeficients %>%
mutate(Basal.Resp       = (est.IntervalInt1 - est.IntervalInt4) / est.IntervalInt1,
ATP.linked.Resp  = (est.IntervalInt1 - est.IntervalInt2) / est.IntervalInt1,
Proton.Leak      = (est.IntervalInt2 - est.IntervalInt4) / est.IntervalInt2,
Spare.Resp.Cpcty = est.IntervalInt3 / est.IntervalInt1,
Maximal.Resp     = est.IntervalInt3 / est.IntervalInt4) %>%
select(c("Basal.Resp", "ATP.linked.Resp", "Proton.Leak", "Spare.Resp.Cpcty", "Maximal.Resp", Sample = "est.Sample" )) %>%
mutate(bio_e = colnames())
?melt
melt(bio_e)
bio<-melt(bio_e)
View(bio)
bio<-melt(bio_e, value.name = "Sample")
bio<-melt(bio_e)
View(bio)
bio<-melt(bio_e, value.name = "Energetics")
ggplot(bio)+
geom_point(aes(variable, Energetics ) color = Sample)+
facet_wrap(variable ~ .)
facet_wrap(Sample ~ .)
ggplot(bio)+
geom_point(aes(variable, Energetics ) color = Sample)+
facet_wrap(Sample ~ .)
ggplot(bio)+
geom_point(aes(variable, Energetics ) color = Sample)
ggplot(bio)+
geom_point(aes(variable, Energetics ), color = Sample)
ggplot(bio)+
geom_point(aes(variable, Energetics, color = Sample))
ggplot(bio)+
geom_point(aes( Energetics,, variable color = Sample))
ggplot(bio)+
geom_point(aes( Energetics, variable color = Sample))
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))+
facet_wrap(variable ~ .)
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))+
facet_wrap(Sample ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))
ggplot(bio)+
geom_point(aes( Energetics, color = Sample))+
facet_wrap(Sample ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, 1, color = Sample))+
facet_wrap(Sample ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, 1, color = Sample))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, 0, color = Sample))+
facet_wrap(variable ~ ., scales = "free")+
scale(NULL)
ggplot(bio)+
geom_point(aes( Energetics, 0, color = Sample))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, 0, color = Sample))+
cale_y_continuous(expand=c(0,0))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, 0, color = Sample))+
scale_y_continuous(expand=c(0,0))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, 0, color = Sample))+
scale_y_continuous(expand=c(0,0))+
facet_wrap(. ~variable, scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))+
facet_wrap(Sample ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes( Energetics, variable, color = Sample))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes(variable, Energetics, color = Sample))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes(0, Energetics, color = Sample))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes(0, Energetics, color = Sample))+
facet_wrap(variable ~ ., scales = "free")
ggplot(bio)+
geom_point(aes(0, Energetics, color = Sample))+
facet_wrap(Sample ~ ., scales = "free")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(magrittr) # Needed for pipe operator %>%
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)     # Needed for tidy data functions like separate
library(tidyverse)
library(readxl)
setwd('/Users/mspc/Desktop/Master_Theis/OCR_pipeline/Experiments/')
source('/Users/mspc/Desktop/Master_Theis/OCR_pipeline/src/analysis_source_functions.R')
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(magrittr) # Needed for pipe operator %>%
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)     # Needed for tidy data functions like separate
library(tidyverse)
library(readxl)
setwd('/Users/mspc/Desktop/Master_Theis/OCR_pipeline/Experiments/')
source('/Users/mspc/Desktop/Master_Theis/OCR_pipeline/src/analysis_source_functions.R')
# Read The the separate xlsx files from folder, Specify entire path to folder.
dm <- read_xlsx_set("../../Data for Matej", ".xlsx")
# Identify Outliars
# DT = loaded dataframe
# cut.well = threshold for well outliaer,
# cut.point = threshold for point outliaer
# x = Variable: "LOCR" or "OCR" or "ECAR"
dm_r <- idfy_outliar(DT = dm, cut.well = 5, cut.point = 7, x = "LOCR" )  # could Print arguments
bio <- compute_bioenergetics(dm_r)$bio
knitr::opts_chunk$set(echo = TRUE)
s <- dm_r %>%
group_by(sample_id, out_bolean) %>%
summarise(n = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n), ptg = n / size *100 ) %>%
filter(out_bolean == T)
# WELL OUTLIARS
# POINT OUTLIARS
s <- dm_r %>%
group_by(Interval, is.out.p ) %>%
summarise(n_point = n()) %>%
group_by(Interval) %>%
mutate(size = sum(n_point), ptg = n_point / size *100 ) %>%
filter(is.out.p == T)
# Procentage of well outliars in separate intervals and samples !!!!
s <- dm_r %>%
group_by(sample_id, Interval, is.out.p ) %>%
summarise(n_point = n()) %>%
group_by(sample_id, Interval) %>%
mutate(size = sum(n_point), ptg = n_point / size *100, Mean_int = mean(ptg) ) %>%
filter(is.out.p == T)
ggplot(s)+
geom_histogram(aes(ptg), binwidth = 2.5 , colour = "black", fill = "red")+
ggtitle(" Percentage of Point Outliars in separate sapmles and  intervals  ")
# ALL OUTLIARS
dm_r <- dm_r %>%
mutate(out_bolean = ifelse(out == "NO", F, T))
s <- dm_r %>%
group_by(Interval, out_bolean) %>%
summarise(n = n()) %>%
group_by(Interval) %>%
mutate(size = sum(n), ptg = n / size *100 ) %>%
filter(out_bolean == T)
ggplot(s)+
geom_histogram(aes(ptg), binwidth = 2.5 , colour = "black", fill = "red")+
ggtitle(" Percentage of Outliars in separate saples and intervals  ")
ggplot(s)+
geom_col(aes(sample_id, ptg, fill = Interval)) +
coord_flip()
dm_r <- dm_r %>%
mutate(out_bolean = ifelse(out == "NO", F, T))
# Procentage of well outliars in separate intervals
sw <- dm_r %>%
group_by(Interval, is.out.w ) %>%
summarise(n_well = n()) %>%
group_by(Interval) %>%
mutate(size = sum(n_well), ptg = n_well / size *100 ) %>%
filter(is.out.w == T)
sp <- dm_r %>%
group_by(Interval, is.out.p ) %>%
summarise(n_point = n()) %>%
group_by(Interval) %>%
mutate(size = sum(n_point), ptg = n_point / size *100 ) %>%
filter(is.out.p == T)
ggplot()+
geom_col(aes(sw$Interval, sw$ptg), fill =  "blue", binwidth= 0.2) +
geom_col(aes(sp$Interval, sp$ptg), fill = "red", binwidth= 0.1) +
coord_flip()+
ylab("%") +
xlab("Interval")+
ggtitle("Outliars across Intervals (Not aditive)")+
geom_text(aes(sw$Interval, sw$ptg, label = paste(format(sw$ptg, digits=2, nsmall=2),"%")),
size = 3, hjust = 2)+
geom_text(aes(sp$Interval, sp$ptg, label = paste(format(sp$ptg, digits=2, nsmall=2),"%")),
size = 3, hjust = 2
)
s <- dm_r %>%
group_by(sample_id, out_bolean) %>%
summarise(n = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n), ptg = n / size *100 ) %>%
filter(out_bolean == T)
sw <- dm_r %>%
group_by(sample_id, is.out.w ) %>%
summarise(n_well = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n_well), ptg = n_well / size *100, Mean_int = mean(ptg) ) %>%
filter(is.out.w == T)
sp <- dm_r %>%
group_by(sample_id, is.out.p ) %>%
summarise(n_point = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n_point), ptg = n_point / size *100, Mean_int = mean(ptg) ) %>%
filter(is.out.p == T)
ggplot()+
geom_col(aes(s$sample_id, s$ptg), fill = "green", binwidth= 0.1) +
geom_col(aes(sw$sample_id, sw$ptg), fill =  "blue", binwidth= 0.2) +
geom_col(aes(sp$sample_id, sp$ptg), fill = "red", binwidth= 0.1) +
coord_flip()+
ylab("%") +
xlab("sample_id")+
ggtitle("Outliars across Samples (Not aditive)")+
geom_text(aes(sw$sample_id, sw$ptg, label = paste(format(sw$ptg, digits=1, nsmall=2),"%")),
size = 3, hjust = 1)+
geom_text(aes(sp$sample_id, sp$ptg, label = paste(format(sp$ptg, digits=1, nsmall=2),"%")),
size = 3, hjust = 1)+
geom_text(aes(s$sample_id, s$ptg, label = paste(format(s$ptg, digits= 1, nsmall=2),"%")),
size = 3, hjust = -0.01)
s <- dm_r %>%
group_by(sample_id, Interval,  out_bolean) %>%
summarise(n = n()) %>%
group_by(sample_id, Interval) %>%
mutate(size = sum(n), ptg = n / size *100 ) %>%
filter(out_bolean == T)
ggplot(s)+
geom_histogram(aes(ptg), binwidth = 2.5 , colour = "black", fill = "red")+
ggtitle(" Outliars in indiviual Intervals accros samples")
pre49 <- filter(dm_r, sample_id == " 49 pre")
ggplot(filter(dm_r, sample_id == "/Data/36-pre"), aes(Time, OCR))+
ggtitle("SAMPLE 49 Pre  all protocols")+
geom_line(aes(group = Well)) +
geom_point(aes(Time, OCR, color = out))
ggplot(filter(dm_r, sample_id == "#46 pre"), aes(Time, OCR))+
ggtitle("SAMPLE 49 Pre In separate protocols ")+
geom_line(aes(group = Well)) +
geom_point(aes(Time, OCR, color = out))+
facet_grid(Protocol  ~ . )
ggplot(filter(dm_r, sample_id == "/Data/36-pre"), aes(Time, OCR))+
ggtitle("SAMPLE 49 Pre  all protocols")+
geom_line(aes(group = Well)) +
geom_point(aes(Time, OCR, color = out))
ggplot(filter(dm_r, sample_id == "#46 pre"), aes(Time, OCR))+
ggtitle("SAMPLE 49 Pre In separate protocols ")+
geom_line(aes(group = Well)) +
geom_point(aes(Time, OCR, color = out))+
facet_grid(Protocol  ~ . )
for (smpl in unique(dm_r$sample_id)) {
plot <- ggplot(filter(dm_r, sample_id == smpl), aes(Time, OCR))+
ggtitle(smpl)+
geom_line(aes(group = Well)) +
geom_point(aes(Time, OCR, color = out))+
facet_grid(Protocol  ~ . )
print(plot)
}
# Procentage of  all outliars across samples
```{r}
s <- dm_r %>%
group_by(sample_id, out_bolean) %>%
summarise(n = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n), ptg = n / size *100 ) %>%
filter(out_bolean == T)
s <- dm_r %>%
group_by(sample_id, out_bolean) %>%
summarise(n = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n), ptg = n / size *100 ) %>%
filter(out_bolean == T)
sw <- dm_r %>%
group_by(sample_id, is.out.w ) %>%
summarise(n_well = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n_well), ptg = n_well / size *100, Mean_int = mean(ptg) ) %>%
filter(is.out.w == T)
sp <- dm_r %>%
group_by(sample_id, is.out.p ) %>%
summarise(n_point = n()) %>%
group_by(sample_id) %>%
mutate(size = sum(n_point), ptg = n_point / size *100, Mean_int = mean(ptg) ) %>%
filter(is.out.p == T)
ggplot()+
geom_col(aes(s$sample_id, s$ptg), fill = "green", binwidth= 0.1) +
geom_col(aes(sw$sample_id, sw$ptg), fill =  "blue", binwidth= 0.2) +
geom_col(aes(sp$sample_id, sp$ptg), fill = "red", binwidth= 0.1) +
coord_flip()+
ylab("%") +
xlab("sample_id")+
ggtitle("Outliars across Samples (Not aditive)")+
geom_text(aes(sw$sample_id, sw$ptg, label = paste(format(sw$ptg, digits=1, nsmall=2),"%")),
size = 3, hjust = 1)+
geom_text(aes(sp$sample_id, sp$ptg, label = paste(format(sp$ptg, digits=1, nsmall=2),"%")),
size = 3, hjust = 1)+
geom_text(aes(s$sample_id, s$ptg, label = paste(format(s$ptg, digits= 1, nsmall=2),"%")),
size = 3, hjust = -0.01)
ggplot()+
geom_col(aes(s$sample_id, s$ptg), fill = "green", binwidth= 0.1) +
geom_col(aes(sw$sample_id, sw$ptg), fill =  "blue", binwidth= 0.2) +
geom_col(aes(sp$sample_id, sp$ptg), fill = "red", binwidth= 0.1) +
coord_flip()+
ylab("%") +
xlab("sample_id")+
ggtitle("Outliars across Samples (Not aditive)")+
geom_text(aes(sw$sample_id, sw$ptg, label = paste(format(sw$ptg, digits=1, nsmall=2),"%")),
size = 3, hjust = 1)+
geom_text(aes(sp$sample_id, sp$ptg, label = paste(format(sp$ptg, digits=1, nsmall=2),"%")),
size = 3, hjust = 1)+
geom_text(aes(s$sample_id, s$ptg, label = paste(format(s$ptg, digits= 1, nsmall=2),"%")),
size = 3, hjust = -0.01)+
scale_colour_manual(values=c("red","green","blue"))
for (smpl in unique(dm_r$sample_id)) {
plot <- ggplot(filter(dm_r, sample_id == smpl), aes(Time, OCR))+
ggtitle(paste0("SAMPLE:  ", smpl))+
geom_line(aes(group = Well)) +
geom_point(aes(Time, OCR, color = out))+
facet_grid(Protocol  ~ . )
print(plot)
}
bio <- compute_bioenergetics(dm_r)
b <- compute_bioenergetics(dm_r)
b <- compute_bioenergetics(dm_r)
bio <- b$bio
b$bio_e
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
# Get input folder
input_folder <- params$input_folder
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_FOUR_INTERVALS.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
knit_cache <- here('Experiments', "OCR+PER-Pipeline_cache")
knit_files <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline_files")
knit_folders <- c(knit_cache, knit_files)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-FOUR-INTERVALS.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_PER+OCR_calculations.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-PER+OCR-calculations_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-PER+OCR-calculations_files.Rmd"), output_dir = OUTPUT_PATH)
# Set path and load the package "here"
here::i_am("Experiments/OCR+PER-Pipeline.Rmd")
if(!("here" %in% installed.packages()[, "Package"])) {
install.packages("here")
}
library(here)       # Used to set the path to the package dir. on the machine
# Check if all packages are installed
source(here("R", "src", "config_file.R"))
# Load libraries
library(tools)
library(reshape2)
library(reshape)
library(tidyverse)
library(readxl)     # Read xlsx file
library(knitr)      # Used for tables
library(kableExtra)
library(shiny)
library(ggbeeswarm)
library(writexl)
# Get input folder and error_measure
input_folder <- params$input_folder
error_measure <- params$error_measure
# Create output folder
output_folder <- sprintf("%s_OUTPUT", input_folder)
o_path <- here("Data", "OUTPUT", output_folder)
if(!dir.exists(o_path)){
dir.create(path = o_path)
}
# source the functions used in analysis
source(here("R", "src", "analysis_source_functions_PER+OCR_calculations.R"))
# INPUT_PATH  <- (here('/Data/INPUT/ConBIS')) # path to the folder of interest
INPUT_PATH  <- (here('Data', "INPUT", input_folder)) # path to the folder of interest
# OUTPUT_PATH <- (here('/Data/OUTPUT/HF'))
OUTPUT_PATH <- (here('Data', "OUTPUT", output_folder))
# Delete old knit files
name_of_cache <- list.files(path = "./Experiments", pattern = "cache", include.dirs = TRUE) # Finds the correct folder by it self. Deletes ALL cache folders.
knit_cache <- here('Experiments', name_of_cache)
knit_figures <- here("Data", "OUTPUT", output_folder, "OCR+PER-Pipeline-PER+OCR-calculations_files")
knit_folders <- c(knit_cache, knit_files, knit_figures)
for (folder in knit_folders) {
if (file.exists(folder))
unlink(folder, recursive = T)
}
# Initialize the knitting process
rmarkdown::render(here('Experiments', "OCR+PER-Pipeline-PER+OCR-calculations.Rmd"), output_dir = OUTPUT_PATH)
